#!/usr/bin/env python

# Ok.  So when we get a /dev/hidg0 thanks to the usb gadget config, its owned
# by root.  That means we need something to shuttle text from user-space into
# the usb gadget.  There's probably something already out there that does this
# but it's quicker and easier for me to rattle something together that does
# what I need.
#
# This thing will listen on a unix domain socket. If you want to send text,
# open that socket and write to it.  If it knows how to convert that to a
# scancode combo, GREAT, off it'll go to the other end of the connection.
# Otherwise it's dropped.
#
# This thing will run as root, and needs to be installed as a systemd unit so
# it doesn't go away.  It's kinda critical.
#
# Right now this only supports a minimal subset of possible characters to send.

import socket
import sys
import toml

from pathlib import Path

class Frame:
    def __init__(self):
        self._buffer = [chr(0x0)]*8

    def press_modifier(self, modifier_scancode):
        self._buffer[0] = modifier_scancode
        return self

    def press_key(self, key_scancode):
        self._buffer[2] = key_scancode
        return self

    def __str__(self):
        return "".join(self._buffer)

# Just enough of an encoder class to do what we need.
# Values shamelessly pilfered from https://gist.github.com/MightyPork/6da26e382a7ad91b5496ee55fdc73db2
class Encoder:
    NULL=chr(0x0)
    SHIFT=chr(0x20)

    def __init__(self):
        self.char_lookup = {}

        # letters
        for i in range(26):
            self.char_lookup[chr(ord('a')+i)] = chr(4+i)

        # numbers
        for i in range(9):
            self.char_lookup[chr(ord('1')+i)] = chr(0x1e+i)
        self.char_lookup['0'] = chr(0x27)

        # limited set of punctuation
        self.char_lookup['-'] = chr(0x2d)
        self.char_lookup["'"] = chr(0x34)

        # Spacing
        self.char_lookup[' '] = chr(0x2c)
        self.char_lookup["\t"] = chr(0x2b)

    def encode_single_character(self, character):
        lookup_char = character.lower()

        frames = []
        if lookup_char in self.char_lookup:
            char_scancode = self.char_lookup[lookup_char]
            key_press_frame = Frame()
            if character.istitle():
                key_press_frame.press_modifier(self.SHIFT)
            key_press_frame.press_key(char_scancode)

            frames.append(key_press_frame)

            keys_released_frame = Frame()
            frames.append(keys_released_frame)

        return ''.join(map(str,frames))

    def to_scancodes(self, string):
        return "".join([self.encode_single_character(c) for c in string]).encode()

if __name__=="__main__":
    conf = toml.load("/etc/keebd.conf")
    socket_filename = conf['socket_path']
    hidg_filename = conf['hidg_device']

    socket_path = Path(socket_filename)
    socket_path.parent.mkdir(parents=True, exist_ok=True)

    # We don't want more than one instance, so if there's already something
    # at the socket_path and we can't delete it, that's bad.  Fall over.
    try:
        socket_path.unlink()
    except OSError:
        if socket_path.exists():
            raise

    # Similarly, we want to fall over hard if we can't open the hidg device, so
    # we use the `with` directly here rather than wrapping the fd.

    with open(hidg_filename, 'rb+') as hidfile:

        sock = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)

        sock.bind(str(socket_path))
        # Now if we just leave it as is, nobody can connect to it: it's
        # root-owned. For now just chmod 0777 it and anyone can connect; we can
        # add a `keeb` group to restrict who can send key characters later
        socket_path.chmod(0o777)
        sock.listen(1)

        encoder = Encoder()
        while True:
            connection, client_address = sock.accept()
            try:
                while True:
                    data = connection.recv(16)

                    if data:
                        encoded = encoder.to_scancodes(data.decode('us-ascii'))
                        hidfile.write(encoded)
                        hidfile.flush()
                    else:
                        break
            finally:
                connection.close()

